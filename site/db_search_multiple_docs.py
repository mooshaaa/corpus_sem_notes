# -*- coding: utf-8 -*-
"""db_search.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19BT2AyumwAWwhyR9Cx5hf9Pf6tPeGJkC
"""

# !pip install sqlite3

import pandas as pd
from tqdm import tqdm
import sqlite3

"""# И задаем запрос"""

db_file = 'database creation/sem_notes_corp.db'

conn = sqlite3.connect(db_file)
cursor = conn.cursor()

# Запрос с несколькими JOIN
cursor.execute("""
    SELECT DISTINCT doc_name
    FROM DOCS
""")

# Получение результата
res = cursor.fetchall()

# Закрываем подключение
conn.close()

doc_names = [r[0] for r in res]
doc_names

import sqlite3

def get_sentences_with_lemma_only(db_file, lemma, doc_name=None, gender=None):
    lemma = lemma.lower()
    """Выбирает предложения из таблицы SENT,
    которые содержат слова с заданной леммой.
    """
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    # Запрос с несколькими JOIN
    if (doc_name != None) and (gender != None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? AND DOCS.gender = ? AND DOCS.doc_name IN ({seq})
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([lemma] + [gender] + doc_name))
    elif (doc_name == None) and (gender != None):
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? AND DOCS.gender = ?
        """, (lemma, gender))
    elif (doc_name != None) and (gender == None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? AND DOCS.doc_name IN ({seq})
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([lemma] + doc_name))
    else:
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ?
        """, (lemma,))

    # Получение результата
    result = cursor.fetchall()

    # Закрываем подключение
    conn.close()

    return result

def get_sentences_with_wordform_only(db_file, wordform, doc_name=None, gender=None):
    """Выбирает предложения из таблицы SENT,
    которые содержат слова с заданной словоформой.
    """
    wordform = wordform.lower()
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    # Запрос с несколькими JOIN
    if (doc_name != None) and (gender != None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? AND DOCS.doc_name IN ({seq}) AND DOCS.gender = ?
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([wordform] + doc_name + [gender]))
    elif (doc_name == None) and (gender != None):
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? AND DOCS.gender = ?
        """, (wordform, gender))
    elif (doc_name != None) and (gender == None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? AND DOCS.doc_name IN ({seq})
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([wordform] + doc_name))
    else:
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ?
        """, (wordform,))


    # Получение результата
    result = cursor.fetchall()

    # Закрываем подключение
    conn.close()

    return result

def get_sentences_with_lemma_tag(db_file, lemma, tag, doc_name=None, gender=None):
    """Выбирает предложения из таблицы SENT,
    которые содержат слова с заданной леммой и тегом.
    """
    lemma = lemma.lower()
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    if (doc_name != None) and (gender != None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? and WORD.tag = ? AND DOCS.doc_name IN ({seq}) AND DOCS.gender = ?
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.exectue(query, tuple([lemma] + [tag] + doc_name + [gender]))
    elif (doc_name == None) and (gender != None):
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? and WORD.tag = ? AND DOCS.gender = ?
        """, (lemma, tag, gender))
    elif (doc_name != None) and (gender == None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? and WORD.tag = ? AND DOCS.doc_name IN ({seq})
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([lemma] + [tag] + doc_name))
    else:
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.lemma = ? and WORD.tag = ?
        """, (lemma, tag))

    # Получение результата
    result = cursor.fetchall()

    # Закрываем подключение
    conn.close()

    return result

def get_sentences_with_wordform_tag(db_file, wordform, tag, doc_name=None, gender=None):
    """Выбирает предложения из таблицы SENT,
    которые содержат слова с заданной словоформой и тегом.
    """
    wordform = wordform.lower()
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    if (doc_name != None) and (gender != None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? and WORD.tag = ? AND DOCS.doc_name IN ({seq}) AND DOCS.gender = ?
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([wordform] + [tag] + doc_name + [gender]))
    elif (doc_name == None) and (gender != None):
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? and WORD.tag = ? AND DOCS.gender = ?
        """, (wordform, tag, gender))
    elif (doc_name != None) and (gender == None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? and WORD.tag = ? AND DOCS.doc_name IN ({seq})
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([wordform] + [tag] + doc_name))
    else:
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.word = ? and WORD.tag = ?
        """, (wordform, tag))

    # Получение результата
    result = cursor.fetchall()

    # Закрываем подключение
    conn.close()

    return result

def get_sentences_with_tag(db_file, tag, doc_name=None, gender=None):
    """Выбирает предложения из таблицы SENT,
    которые содержат слова с заданным тегом.
    """
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()

    if (doc_name != None) and (gender != None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.tag = ? AND DOCS.doc_name IN ({seq}) AND DOCS.gender = ?
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([tag] + doc_name + [gender]))
    elif (doc_name == None) and (gender != None):
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.tag = ? AND DOCS.gender = ?
        """, (tag, gender))
    elif (doc_name != None) and (gender == None):
        query = """
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.tag = ? AND DOCS.doc_name IN ({seq})
        """.format(seq=','.join(['?']*len(doc_name)))
        cursor.execute(query, tuple([tag] + doc_name))
    else:
        cursor.execute("""
            SELECT DISTINCT WORD.sent_id, WORD.word_position, DOCS.doc_id
            FROM WORD
            JOIN SENT ON SENT.sent_id = WORD.sent_id
            JOIN DOCS on DOCS.doc_id = SENT.doc
            WHERE WORD.tag = ?
        """, (tag, ))


    # Получение результата
    result = cursor.fetchall()

    # Закрываем подключение
    conn.close()

    return result

# !pip install pymorphy2

import pymorphy2

morph = pymorphy2.MorphAnalyzer()

all_tags = ['A', 'ADV', 'ADVPRO', 'ANUM', 'APRO',
            'COM', 'CONJ', 'INTJ', 'NUM', 'PART',
            'PR', 'S', 'SPRO', 'V']

def search(query, db_file, doc_name=None, gender=None):
    """Выбирает предложения из таблицы SENT,
    которые содержат поисковый запрос.
    """

    # делим запрос на части
    query_parts = query.split()
    # счетчик по предложениям
    wp = None
    # для каждой части запроса
    for query_part in query_parts:
        # делим запрос по знаку + (если вдруг есть тег)
        part = query_part.split('+')
        # если есть тег
        if len(part) == 2:
            # отдельно записываем слово и тег
            word, tag = part[0], part[1]
            # если мы ищем словоформу
            if word[0] and word[-1] == '"':
                # находим все предложения со словоформой
                # (предложение, номер в предложении)
                sentences = get_sentences_with_wordform_tag(db_file, word, tag, doc_name, gender)
                # если счетчик не задан (первый элемент запроса)
                if wp == None:
                    # делаем словарь
                    # предложение: номер в предложении
                    wp = {s[0]: [s[1]] for s in sentences}
                # если уже задан (то есть не первый элемент)
                else:
                    for s in sentences:
                        if s[0] in wp:
                            if wp[s[0]][-1] == s[1] - 1:
                                wp[s[0]].append(s[1])
                            else:
                                del wp[s[0]]
            # если ищем лемму
            else:
                # собственно лемма
                word = morph.parse(word)[0].normal_form
                # дальше то же самое
                sentences = get_sentences_with_lemma_tag(db_file, word, tag, doc_name, gender)
                if wp == None:
                    wp = {s[0]: [s[1]] for s in sentences}
                    # sents.append(sentences)
                else:
                    for s in sentences:
                        if s[0] in wp:
                            if wp[s[0]][-1] == s[1] - 1:
                                wp[s[0]].append(s[1])
                            else:
                                del wp[s[0]]
        # если тега нет
        else:
            # то же самое, что раньше
            word = part[0]
            if word[0] and word[-1] == '"':
                sentences = get_sentences_with_wordform_only(db_file, word, doc_name, gender)
                if wp == None:
                    wp = {s[0]: [s[1]] for s in sentences}
                    # sents.append(sentences)
                else:
                    for s in sentences:
                        if s[0] in wp:
                            if wp[s[0]][-1] == s[1] - 1:
                                wp[s[0]].append(s[1])
                            else:
                                del wp[s[0]]
            else:
                if word not in all_tags:
                    word = morph.parse(word)[0].normal_form
                    sentences = get_sentences_with_lemma_only(db_file, word, doc_name, gender)
                else:
                    sentences = get_sentences_with_tag(db_file, word, doc_name, gender)
                if wp == None:
                    wp = {s[0]: [s[1]] for s in sentences}
                    # sents.append(sentences)
                else:
                    for s in sentences:
                        if s[0] in wp:
                            if wp[s[0]][-1] == s[1] - 1:
                                wp[s[0]].append(s[1])
                            else:
                                del wp[s[0]]
    sents = [elem for elem in wp if len(wp[elem]) == len(query_parts)]
    # sents = list(wp.keys())
    conn = sqlite3.connect(db_file)
    cursor = conn.cursor()
    # Запрос с несколькими JOIN
    cursor.execute("""
        SELECT DISTINCT DOCS.gender, DOCS.doc_name, SENT.sentence_text
        FROM SENT
        JOIN DOCS on DOCS.doc_id = SENT.doc
        WHERE SENT.sent_id IN ({seq})""".format(
    seq=','.join(['?']*len(sents))), sents)

    # Получение результата
    result = cursor.fetchall()

    # Закрываем подключение
    conn.close()

    output = {}

    for r in result:
        if r[2] not in output:
            output[r[2]] = {'Название конспекта': r[1],
                            'Пол автора': r[0],
                            'Год': 2023}
    return output

# Commented out IPython magic to ensure Python compatibility.
# %time
search('A рамка', 'database creation/sem_notes_corp.db', doc_name=['Компоненты значения.', 'Отрицательная и положительная поляризация.'])
